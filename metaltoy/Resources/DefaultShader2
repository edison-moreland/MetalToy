#include <metal_stdlib>

using namespace metal;

#define MAX_MARCHING_STEPS 255
#define MIN_DISTANCE 0.0
#define MAX_DISTANCE 100.0
#define EPSILON 0.0001
 
namespace MetalToy
{
    float sphereSDF(float3 p) {
        return length(p) - 1.0;
    }
    
    float sceneSDF(float3 p) {
        return sphereSDF(p);
    }
    
    float shortestDistanceToSurface(float3 eye, float3 marchingDirection, float start, float end) {
        float depth = start;
        for (int i = 0; i< MAX_MARCHING_STEPS; i++) {
            float distance = sceneSDF(eye + depth * marchingDirection);
            if (distance < EPSILON) {
                return depth;
            }
            depth += distance;
            if (depth >= end) {
                return end;
            }
        }
        return end;
    }
    
    // Candidate for expanded math library
    float radians(float degrees) {
        return degrees * (M_PI_F/180);
    }
    
    float3 rayDirection(float fieldOfView, float2 size, float2 fragCoord) {
        float2 xy = fragCoord - size/2.0;
        float z = size.y / tan(radians(fieldOfView) / 2.0);
        return normalize(float3(xy, -z));
    }
    
    float3 estimateNormal(float3 p) {
        return normalize(float3(
            sceneSDF(float3(p.x + EPSILON, p.y, p.z)) - sceneSDF(float3(p.x - EPSILON, p.y, p.z)),
            sceneSDF(float3(p.x, p.y + EPSILON, p.z)) - sceneSDF(float3(p.x, p.y - EPSILON, p.z)),
            sceneSDF(float3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(float3(p.x, p.y, p.z - EPSILON))
        ));
    }
    
    float3 phongLightSource(float3 diffuseColor, float3 specularColor, float shinyCoff,
                            float3 p, float3 eye, float3 lightPosition, float3 lightIntensity) {
        float3 N = estimateNormal(p);
        float3 L = normalize(lightPosition - p);
        float3 V = normalize(eye - p);
        float3 R = normalize(reflect(-L, N));
    
        float dotLN = dot(L, N);
        float dotRV = dot(R, V);
    
        if (dotLN < 0.0) {
            // Light not visible from this point on the surface
            return float3(0.0, 0.0, 0.0);
        }
    
        if (dotRV < 0.0) {
            // Light reflection in opposite direction as viewer, apply only diffuse
            // component
            return lightIntensity * (diffuseColor * dotLN);
        }
        return lightIntensity * (diffuseColor * dotLN + diffuseColor * pow(dotRV, shinyCoff));
    }
 
    float3 phongIllumination(float3 ambientColor, float3 diffuseColor, float3 specularColor,
                             float shinyCoff, float3 p, float3 eye, float time) {
        const float3 ambientLight = 0.5 * float3(1.0, 1.0, 1.0);
        float3 color = ambientLight * ambientColor;
    
        float3 light1Pos = float3(4.0 * sin(time),
                                  2.0,
                                  4.0 * cos(time));
        float3 light1Intensity = float3(0.4, 0.4, 0.4);
    
        color += phongLightSource(diffuseColor, specularColor, shinyCoff, p, eye,
                                  light1Pos,
                                  light1Intensity);
    
        float3 light2Pos = float3(2.0 * sin(0.37 * time),
                                  2.0 * cos(0.37 * time),
                                  2.0);
        float3 light2Intensity = float3(0.4, 0.4, 0.4);
    
        color += phongLightSource(diffuseColor, specularColor, shinyCoff, p, eye,
                                      light2Pos,
                                      light2Intensity);
        return color;
    }
 
    float4 frag(float2 coord, float2 viewport, float time)
    {
        float3 direction = rayDirection(45.0, viewport, coord);
        float3 eye = float3(0.0, 0.0, 5.0);
        float distance = shortestDistanceToSurface(eye, direction, MIN_DISTANCE, MAX_DISTANCE);
        
        if (distance > MAX_DISTANCE - EPSILON) {
            return float4(0.0, 0.0, 0.0, 0.0);
        }
        
        float3 p = eye + distance * direction;
        
        float3 ambientColor = float3(0.2, 0.2, 0.2);
        float3 diffuseColor = float3(0.7, 0.2, 0.2);
        float3 specularColor = float3(1.0, 1.0, 1.0);
        float shininess = 10.0;
        
        return float4(phongIllumination(ambientColor, diffuseColor, specularColor, shininess, p, eye, time), 1.0);
        
    }
}

